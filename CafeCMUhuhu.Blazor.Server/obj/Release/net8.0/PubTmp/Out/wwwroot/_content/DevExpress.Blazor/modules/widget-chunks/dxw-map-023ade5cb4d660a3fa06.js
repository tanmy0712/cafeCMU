"use strict";(self.webpackChunkdevexpress_blazor_client=self.webpackChunkdevexpress_blazor_client||[]).push([[970],{9498:(e,t,o)=>{o.r(t),o.d(t,{default:()=>j});var s=o(9297),i=o(9925),n=o(3241),r=o(555),a=o(6206),h=o(5649),d=o(8214),c=o(2753),p=o(2678),l=o(9488),_=o(4343),u=o(9743),m=o(7224),g=o(1898),v=o(8015),M=o(7311),f=o(2051),k=o(741),y=o(9186),w=o(5104);const{abstract:A}=w.default,b=w.default.inherit({_defaultRouteWeight:()=>5,_defaultRouteOpacity:()=>.5,_defaultRouteColor:()=>"#0000FF",ctor(e,t){this._mapWidget=e,this._$container=t},render(e,t){return this._renderImpl().then((()=>Promise.all([this._applyFunctionIfNeeded("addMarkers",e),this._applyFunctionIfNeeded("addRoutes",t)]).then((()=>!0))))},_renderImpl:A,updateDimensions:A,updateMapType:A,updateBounds:A,updateCenter:A,updateZoom:A,updateControls:A,updateMarkers(e,t){return new Promise((o=>this._applyFunctionIfNeeded("removeMarkers",e).then((e=>{this._applyFunctionIfNeeded("addMarkers",t).then((t=>{o(t||e)}))}))))},addMarkers:A,removeMarkers:A,adjustViewport:A,updateRoutes(e,t){return new Promise((o=>this._applyFunctionIfNeeded("removeRoutes",e).then((e=>{this._applyFunctionIfNeeded("addRoutes",t).then((t=>{o(t||e)}))}))))},addRoutes:A,removeRoutes:A,clean:A,map(){return this._map},isEventsCanceled:()=>!1,_option(e,t){if(void 0===t)return this._mapWidget.option(e);this._mapWidget.setOptionSilent(e,t)},_keyOption(e){const t=this._option("apiKey");return void 0===t[e]?t:t[e]},_parseTooltipOptions:e=>({text:e.text||e,visible:e.isShown||!1}),_getLatLng(e){if("string"==typeof e){const t=(0,p.map)(e.split(","),(e=>e.trim())),o=/^[-+]?[0-9]*\.?[0-9]*$/;if(2===t.length&&t[0].match(o)&&t[1].match(o))return{lat:parseFloat(t[0]),lng:parseFloat(t[1])}}else{if(Array.isArray(e)&&2===e.length)return{lat:e[0],lng:e[1]};if((0,l.PO)(e)&&(0,l.kE)(e.lat)&&(0,l.kE)(e.lng))return e}return null},_areBoundsSet(){return this._option("bounds.northEast")&&this._option("bounds.southWest")},_addEventNamespace(e){return(0,m.addNamespace)(e,this._mapWidget.NAME)},_applyFunctionIfNeeded(e,t){return t.length?this[e](t):Promise.resolve()},_fireAction(e,t){this._mapWidget._createActionByOption(e)(t)},_fireClickAction(e){this._fireAction("onClick",e)},_fireMarkerAddedAction(e){this._fireAction("onMarkerAdded",e)},_fireMarkerRemovedAction(e){this._fireAction("onMarkerRemoved",e)},_fireRouteAddedAction(e){this._fireAction("onRouteAdded",e)},_fireRouteRemovedAction(e){this._fireAction("onRouteRemoved",e)}}),R=b,{abstract:L}=R,C=R.inherit({_geocodeLocation(e){return new Promise((t=>{const o=this._geocodedLocations,s=o[e];s?t(s):this._geocodeLocationImpl(e).then((s=>{o[e]=s,t(s)}))}))},_renderImpl(){return this._load().then((()=>this._init())).then((()=>Promise.all([this.updateMapType(),this._areBoundsSet()?this.updateBounds():this.updateCenter()]))).then((()=>(this._attachHandlers(),new Promise((e=>{const t=setTimeout((()=>{clearTimeout(t),e()}))})))))},_load(){return this._mapsLoader||(this._mapsLoader=this._loadImpl()),this._markers=[],this._routes=[],this._mapsLoader},_loadImpl:L,_init:L,_attachHandlers:L,addMarkers(e){return Promise.all((0,p.map)(e,(e=>this._addMarker(e)))).then((e=>(this._fitBounds(),[!1,(0,p.map)(e,(e=>e.marker))])))},_addMarker(e){return this._renderMarker(e).then((t=>(this._markers.push((0,d.l)({options:e},t)),this._fireMarkerAddedAction({options:e,originalMarker:t.marker}),t)))},_renderMarker:L,removeMarkers(e){const t=this;return(0,p.each)(e,((e,o)=>{t._removeMarker(o)})),Promise.resolve()},_removeMarker(e){const t=this;(0,p.each)(this._markers,((o,s)=>s.options!==e||(t._destroyMarker(s),t._markers.splice(o,1),t._fireMarkerRemovedAction({options:s.options}),!1)))},_destroyMarker:L,_clearMarkers(){for(;this._markers.length>0;)this._removeMarker(this._markers[0].options)},addRoutes(e){return Promise.all((0,p.map)(e,(e=>this._addRoute(e)))).then((e=>(this._fitBounds(),[!1,(0,p.map)(e,(e=>e.instance))])))},_addRoute(e){return this._renderRoute(e).then((t=>(this._routes.push((0,d.l)({options:e},t)),this._fireRouteAddedAction({options:e,originalRoute:t.instance}),t)))},_renderRoute:L,removeRoutes(e){const t=this;return(0,p.each)(e,((e,o)=>{t._removeRoute(o)})),Promise.resolve()},_removeRoute(e){const t=this;(0,p.each)(this._routes,((o,s)=>s.options!==e||(t._destroyRoute(s),t._routes.splice(o,1),t._fireRouteRemovedAction({options:e}),!1)))},_destroyRoute:L,_clearRoutes(){for(;this._routes.length>0;)this._removeRoute(this._routes[0].options)},adjustViewport(){return this._fitBounds()},isEventsCanceled:()=>!0,_fitBounds:L,_updateBounds(){const e=this;this._clearBounds(),this._option("autoAdjust")&&((0,p.each)(this._markers,((t,o)=>{e._extendBounds(o.location)})),(0,p.each)(this._routes,((t,o)=>{o.northEast&&e._extendBounds(o.northEast),o.southWest&&e._extendBounds(o.southWest)})))},_clearBounds(){this._bounds=null},_extendBounds:L}),P=(0,y.getWindow)(),E="_bingScriptReady";let S=`https://www.bing.com/api/maps/mapcontrol?callback=${E}`;const O=function(){return P.Microsoft&&P.Microsoft.Maps};let $;const T=C.inherit({_mapType(e){const t={roadmap:Microsoft.Maps.MapTypeId.road,hybrid:Microsoft.Maps.MapTypeId.aerial,satellite:Microsoft.Maps.MapTypeId.aerial};return t[e]||t.road},_movementMode(e){const t={driving:Microsoft.Maps.Directions.RouteMode.driving,walking:Microsoft.Maps.Directions.RouteMode.walking};return t[e]||t.driving},_resolveLocation(e){return new Promise((t=>{const o=this._getLatLng(e);o?t(new Microsoft.Maps.Location(o.lat,o.lng)):this._geocodeLocation(e).then((e=>{t(e)}))}))},_geocodedLocations:{},_geocodeLocationImpl(e){return new Promise((t=>{if(!(0,l.$K)(e))return void t(new Microsoft.Maps.Location(0,0));const o=new Microsoft.Maps.Search.SearchManager(this._map),s={where:e,count:1,callback(e){if(e.results[0]){const o=e.results[0].location;t(new Microsoft.Maps.Location(o.latitude,o.longitude))}else t(new Microsoft.Maps.Location(0,0))}};o.geocode(s)}))},_normalizeLocation:e=>({lat:e.latitude,lng:e.longitude}),_normalizeLocationRect(e){const t=this._normalizeLocation(e.getNorthwest()),o=this._normalizeLocation(e.getSoutheast());return{northEast:{lat:t.lat,lng:o.lng},southWest:{lat:o.lat,lng:t.lng}}},_loadImpl(){return new Promise((e=>{O()?e():($||($=this._loadMapScript()),$.then((()=>{O()?e():this._loadMapScript().then(e)})))})).then((()=>Promise.all([new Promise((e=>{Microsoft.Maps.loadModule("Microsoft.Maps.Search",{callback:e})})),new Promise((e=>{Microsoft.Maps.loadModule("Microsoft.Maps.Directions",{callback:e})}))])))},_loadMapScript:()=>new Promise((e=>{P[E]=e,f.default.sendRequest({url:S,dataType:"script"})})).then((()=>{try{delete P[E]}catch(e){P[E]=void 0}})),_init(){return this._createMap(),Promise.resolve()},_createMap(){const e=this._option("controls");this._map=new Microsoft.Maps.Map(this._$container[0],{credentials:this._keyOption("bing"),zoom:this._option("zoom"),showDashboard:e,showMapTypeSelector:e,showScalebar:e})},_attachHandlers(){this._providerViewChangeHandler=Microsoft.Maps.Events.addHandler(this._map,"viewchange",this._viewChangeHandler.bind(this)),this._providerClickHandler=Microsoft.Maps.Events.addHandler(this._map,"click",this._clickActionHandler.bind(this))},_viewChangeHandler(){const e=this._map.getBounds();this._option("bounds",this._normalizeLocationRect(e));const t=this._map.getCenter();this._option("center",this._normalizeLocation(t)),this._preventZoomChangeEvent||this._option("zoom",this._map.getZoom())},_clickActionHandler(e){"map"===e.targetType&&this._fireClickAction({location:this._normalizeLocation(e.location)})},updateDimensions(){const e=this._$container;return this._map.setOptions({width:(0,k.dz)(e),height:(0,k.Cr)(e)}),Promise.resolve()},updateMapType(){const e=this._option("type"),t=Microsoft.Maps.LabelOverlay;return this._map.setView({animate:!1,mapTypeId:this._mapType(e),labelOverlay:"satellite"===e?t.hidden:t.visible}),Promise.resolve()},updateBounds(){return Promise.all([this._resolveLocation(this._option("bounds.northEast")),this._resolveLocation(this._option("bounds.southWest"))]).then((e=>{const t=new Microsoft.Maps.LocationRect.fromLocations(e[0],e[1]);this._map.setView({animate:!1,bounds:t})}))},updateCenter(){return this._resolveLocation(this._option("center")).then((e=>{this._map.setView({animate:!1,center:e})}))},updateZoom(){return this._map.setView({animate:!1,zoom:this._option("zoom")}),Promise.resolve()},updateControls(){return this.clean(),this.render.apply(this,arguments)},_renderMarker(e){return this._resolveLocation(e.location).then((t=>{const o={icon:e.iconSrc||this._option("markerIconSrc")};if(e.html){(0,d.l)(o,{htmlContent:e.html,width:null,height:null});const{htmlOffset:t}=e;t&&(o.anchor=new Microsoft.Maps.Point(-t.left,-t.top))}const s=new Microsoft.Maps.Pushpin(t,o);this._map.entities.push(s);const i=this._renderTooltip(t,e.tooltip);let n;if(e.onClick||e.tooltip){const o=this._mapWidget._createAction(e.onClick||a.noop),r=this._normalizeLocation(t);n=Microsoft.Maps.Events.addHandler(s,"click",(()=>{o({location:r}),i&&i.setOptions({visible:!0})}))}return{location:t,marker:s,infobox:i,handler:n}}))},_renderTooltip(e,t){if(!t)return;t=this._parseTooltipOptions(t);const o=new Microsoft.Maps.Infobox(e,{description:t.text,offset:new Microsoft.Maps.Point(0,13),visible:t.visible});return o.setMap(this._map),o},_destroyMarker(e){this._map.entities.remove(e.marker),e.infobox&&e.infobox.setMap(null),e.handler&&Microsoft.Maps.Events.removeHandler(e.handler)},_renderRoute(e){return Promise.all((0,p.map)(e.locations,(e=>this._resolveLocation(e)))).then((t=>new Promise((o=>{const s=new Microsoft.Maps.Directions.DirectionsManager(this._map),i=new M.default(e.color||this._defaultRouteColor()).toHex(),n=new Microsoft.Maps.Color.fromHex(i);n.a=255*(e.opacity||this._defaultRouteOpacity()),s.setRenderOptions({autoUpdateMapView:!1,displayRouteSelector:!1,waypointPushpinOptions:{visible:!1},drivingPolylineOptions:{strokeColor:n,strokeThickness:e.weight||this._defaultRouteWeight()},walkingPolylineOptions:{strokeColor:n,strokeThickness:e.weight||this._defaultRouteWeight()}}),s.setRequestOptions({routeMode:this._movementMode(e.mode),routeDraggable:!1}),(0,p.each)(t,((e,t)=>{const o=new Microsoft.Maps.Directions.Waypoint({location:t});s.addWaypoint(o)}));const r=[];r.push(Microsoft.Maps.Events.addHandler(s,"directionsUpdated",(e=>{for(;r.length;)Microsoft.Maps.Events.removeHandler(r.pop());const t=e.routeSummary[0];o({instance:s,northEast:t.northEast,southWest:t.southWest})}))),r.push(Microsoft.Maps.Events.addHandler(s,"directionsError",(e=>{for(;r.length;)Microsoft.Maps.Events.removeHandler(r.pop());const t=`RouteResponseCode: ${e.responseCode} - ${e.message}`;g.Z.log("W1006",t),o({instance:s})}))),s.calculateDirections()}))))},_destroyRoute(e){e.instance.dispose()},_fitBounds(){if(this._updateBounds(),this._bounds&&this._option("autoAdjust")){const e=this._map.getZoom();this._preventZoomChangeEvent=!0;const t=this._bounds.clone();t.height*=1.1,t.width*=1.1,this._map.setView({animate:!1,bounds:t,zoom:e});const o=this._map.getZoom();e<o?this._map.setView({animate:!1,zoom:e}):this._option("zoom",o),delete this._preventZoomChangeEvent}return Promise.resolve()},_extendBounds(e){this._bounds?this._bounds=new Microsoft.Maps.LocationRect.fromLocations(this._bounds.getNorthwest(),this._bounds.getSoutheast(),e):this._bounds=new Microsoft.Maps.LocationRect(e,1e-16,1e-16)},clean(){return this._map&&(Microsoft.Maps.Events.removeHandler(this._providerViewChangeHandler),Microsoft.Maps.Events.removeHandler(this._providerClickHandler),this._clearMarkers(),this._clearRoutes(),this._map.dispose()),Promise.resolve()}}),B=T,z=(0,y.getWindow)(),I="_googleScriptReady";let W,Z=`https://maps.googleapis.com/maps/api/js?callback=${I}`;const x=function(){return z.google&&z.google.maps};let H;const D=C.inherit({_mapType(e){const t={hybrid:google.maps.MapTypeId.HYBRID,roadmap:google.maps.MapTypeId.ROADMAP,satellite:google.maps.MapTypeId.SATELLITE};return t[e]||t.hybrid},_movementMode(e){const t={driving:google.maps.TravelMode.DRIVING,walking:google.maps.TravelMode.WALKING};return t[e]||t.driving},_resolveLocation(e){return new Promise((t=>{const o=this._getLatLng(e);o?t(new google.maps.LatLng(o.lat,o.lng)):this._geocodeLocation(e).then((e=>{t(e)}))}))},_geocodedLocations:{},_geocodeLocationImpl:e=>new Promise((t=>{(0,l.$K)(e)?(new google.maps.Geocoder).geocode({address:e},((e,o)=>{o===google.maps.GeocoderStatus.OK?t(e[0].geometry.location):(g.Z.log("W1006",o),t(new google.maps.LatLng(0,0)))})):t(new google.maps.LatLng(0,0))})),_normalizeLocation:e=>({lat:e.lat(),lng:e.lng()}),_normalizeLocationRect(e){return{northEast:this._normalizeLocation(e.getNorthEast()),southWest:this._normalizeLocation(e.getSouthWest())}},_loadImpl(){return new Promise((e=>{x()?e():(H||(H=this._loadMapScript()),H.then((()=>{x()?e():this._loadMapScript().then(e)})))})).then((()=>{W=function(e){this._position=e.position,this._offset=e.offset,this._$overlayContainer=(0,n.Z)("<div>").css({position:"absolute",display:"none",cursor:"pointer"}).append(e.html),this.setMap(e.map)},W.prototype=new google.maps.OverlayView,W.prototype.onAdd=function(){(0,n.Z)(this.getPanes().overlayMouseTarget).append(this._$overlayContainer),this._clickListener=google.maps.event.addDomListener(this._$overlayContainer.get(0),"click",(e=>{google.maps.event.trigger(this,"click"),e.preventDefault()})),this.draw()},W.prototype.onRemove=function(){google.maps.event.removeListener(this._clickListener),this._$overlayContainer.remove()},W.prototype.draw=function(){const e=this.getProjection().fromLatLngToDivPixel(this._position);this._$overlayContainer.css({left:e.x+this._offset.left,top:e.y+this._offset.top,display:"block"})}}))},_loadMapScript(){return new Promise((e=>{const t=this._keyOption("google");z[I]=e,f.default.sendRequest({url:Z+(t?`&key=${t}`:""),dataType:"script"})})).then((()=>{try{delete z[I]}catch(e){z[I]=void 0}}))},_init(){return new Promise((e=>{this._resolveLocation(this._option("center")).then((t=>{const o=this._option("controls");this._map=new google.maps.Map(this._$container[0],{zoom:this._option("zoom"),center:t,disableDefaultUI:!o});const s=google.maps.event.addListener(this._map,"idle",(()=>{e(s)}))}))})).then((e=>{google.maps.event.removeListener(e)}))},_attachHandlers(){this._boundsChangeListener=google.maps.event.addListener(this._map,"bounds_changed",this._boundsChangeHandler.bind(this)),this._clickListener=google.maps.event.addListener(this._map,"click",this._clickActionHandler.bind(this))},_boundsChangeHandler(){const e=this._map.getBounds();this._option("bounds",this._normalizeLocationRect(e));const t=this._map.getCenter();this._option("center",this._normalizeLocation(t)),this._preventZoomChangeEvent||this._option("zoom",this._map.getZoom())},_clickActionHandler(e){this._fireClickAction({location:this._normalizeLocation(e.latLng)})},updateDimensions(){const e=this._option("center");return google.maps.event.trigger(this._map,"resize"),this._option("center",e),this.updateCenter()},updateMapType(){return this._map.setMapTypeId(this._mapType(this._option("type"))),Promise.resolve()},updateBounds(){return Promise.all([this._resolveLocation(this._option("bounds.northEast")),this._resolveLocation(this._option("bounds.southWest"))]).then((e=>{const t=new google.maps.LatLngBounds;t.extend(e[0]),t.extend(e[1]),this._map.fitBounds(t)}))},updateCenter(){return this._resolveLocation(this._option("center")).then((e=>{this._map.setCenter(e),this._option("center",this._normalizeLocation(e))}))},updateZoom(){return this._map.setZoom(this._option("zoom")),Promise.resolve()},updateControls(){const e=this._option("controls");return this._map.setOptions({disableDefaultUI:!e}),Promise.resolve()},isEventsCanceled(e){const t=this._map&&this._map.get("gestureHandling");return!((0,n.Z)(e.target).closest(".gm-style-iw").length>0||"desktop"!==i.default.real().deviceType&&"cooperative"===t)&&this.callBase()},_renderMarker(e){return this._resolveLocation(e.location).then((t=>{let o;o=e.html?new W({map:this._map,position:t,html:e.html,offset:(0,d.l)({top:0,left:0},e.htmlOffset)}):new google.maps.Marker({position:t,map:this._map,icon:e.iconSrc||this._option("markerIconSrc")});const s=this._renderTooltip(o,e.tooltip);let i;if(e.onClick||e.tooltip){const n=this._mapWidget._createAction(e.onClick||a.noop),r=this._normalizeLocation(t);i=google.maps.event.addListener(o,"click",(()=>{n({location:r}),s&&s.open(this._map,o)}))}return{location:t,marker:o,listener:i}}))},_renderTooltip(e,t){if(!t)return;t=this._parseTooltipOptions(t);const o=new google.maps.InfoWindow({content:t.text});return t.visible&&o.open(this._map,e),o},_destroyMarker(e){e.marker.setMap(null),e.listener&&google.maps.event.removeListener(e.listener)},_renderRoute(e){return Promise.all((0,p.map)(e.locations,(e=>this._resolveLocation(e)))).then((t=>new Promise((o=>{const s={origin:t.shift(),destination:t.pop(),waypoints:(0,p.map)(t,(e=>({location:e,stopover:!0}))),optimizeWaypoints:!0,travelMode:this._movementMode(e.mode)};(new google.maps.DirectionsService).route(s,((t,s)=>{if(s===google.maps.DirectionsStatus.OK){const s=new M.default(e.color||this._defaultRouteColor()).toHex(),i={directions:t,map:this._map,suppressMarkers:!0,preserveViewport:!0,polylineOptions:{strokeWeight:e.weight||this._defaultRouteWeight(),strokeOpacity:e.opacity||this._defaultRouteOpacity(),strokeColor:s}},n=new google.maps.DirectionsRenderer(i),{bounds:r}=t.routes[0];o({instance:n,northEast:r.getNorthEast(),southWest:r.getSouthWest()})}else g.Z.log("W1006",s),o({instance:new google.maps.DirectionsRenderer({})})}))}))))},_destroyRoute(e){e.instance.setMap(null)},_fitBounds(){if(this._updateBounds(),this._bounds&&this._option("autoAdjust")){const e=this._map.getZoom();this._preventZoomChangeEvent=!0,this._map.fitBounds(this._bounds),this._boundsChangeHandler();const t=this._map.getZoom();e<t?this._map.setZoom(e):this._option("zoom",t),delete this._preventZoomChangeEvent}return Promise.resolve()},_extendBounds(e){this._bounds||(this._bounds=new google.maps.LatLngBounds),this._bounds.extend(e)},clean(){return this._map&&(google.maps.event.removeListener(this._boundsChangeListener),google.maps.event.removeListener(this._clickListener),this._clearMarkers(),this._clearRoutes(),delete this._map,this._$container.empty()),Promise.resolve()}});var N=o(4969);const F={googleStatic:R.inherit({_locationToString(e){const t=this._getLatLng(e);return t?`${t.lat},${t.lng}`:e.toString().replace(/ /g,"+")},_renderImpl(){return this._updateMap()},updateDimensions(){return this._updateMap()},updateMapType(){return this._updateMap()},updateBounds:()=>Promise.resolve(),updateCenter(){return this._updateMap()},updateZoom(){return this._updateMap()},updateControls:()=>Promise.resolve(),addMarkers(e){const t=this;return this._updateMap().then((o=>((0,p.each)(e,((e,o)=>{t._fireMarkerAddedAction({options:o})})),o)))},removeMarkers(e){const t=this;return this._updateMap().then((o=>((0,p.each)(e,((e,o)=>{t._fireMarkerRemovedAction({options:o})})),o)))},adjustViewport:()=>Promise.resolve(),addRoutes(e){const t=this;return this._updateMap().then((o=>((0,p.each)(e,((e,o)=>{t._fireRouteAddedAction({options:o})})),o)))},removeRoutes(e){const t=this;return this._updateMap().then((o=>((0,p.each)(e,((e,o)=>{t._fireRouteRemovedAction({options:o})})),o)))},clean(){return this._$container.css("backgroundImage","none"),_.Z.off(this._$container,this._addEventNamespace(N.name)),Promise.resolve()},mapRendered:()=>!0,_updateMap(){const e=this._keyOption("googleStatic"),t=this._$container,o=["sensor=false",`size=${Math.round((0,k.dz)(t))}x${Math.round((0,k.Cr)(t))}`,`maptype=${this._option("type")}`,`center=${this._locationToString(this._option("center"))}`,`zoom=${this._option("zoom")}`,this._markersSubstring()];o.push.apply(o,this._routeSubstrings()),e&&o.push(`key=${e}`);const s="https://maps.google.com/maps/api/staticmap?"+o.join("&");return this._$container.css("background",`url("${s}") no-repeat 0 0`),this._attachClickEvent(),Promise.resolve(!0)},_markersSubstring(){const e=this,t=[],o=this._option("markerIconSrc");return o&&t.push(`icon:${o}`),(0,p.each)(this._option("markers"),((o,s)=>{t.push(e._locationToString(s.location))})),`markers=${t.join("|")}`},_routeSubstrings(){const e=this,t=[];return(0,p.each)(this._option("routes"),((o,s)=>{const i=new M.default(s.color||e._defaultRouteColor()).toHex().replace("#","0x"),n=Math.round(255*(s.opacity||e._defaultRouteOpacity())).toString(16),r=s.weight||e._defaultRouteWeight(),a=[];(0,p.each)(s.locations,((t,o)=>{a.push(e._locationToString(o))})),t.push(`path=color:${i}${n}|weight:${r}|${a.join("|")}`)})),t},_attachClickEvent(){const e=this,t=this._addEventNamespace(N.name);_.Z.off(this._$container,t),_.Z.on(this._$container,t,(t=>{e._fireClickAction({event:t})}))}}),google:D,bing:B},V=v.default.inherit({_getDefaultOptions(){return(0,d.l)(this.callBase(),{bounds:{northEast:null,southWest:null},center:{lat:0,lng:0},zoom:1,width:300,height:300,type:"roadmap",provider:"google",autoAdjust:!0,markers:[],markerIconSrc:null,onMarkerAdded:null,onMarkerRemoved:null,routes:[],onRouteAdded:null,onRouteRemoved:null,apiKey:{bing:"",google:"",googleStatic:""},controls:!1,onReady:null,onUpdated:null,onClick:null})},_defaultOptionsRules(){return this.callBase().concat([{device:()=>"desktop"===i.default.real().deviceType&&!i.default.isSimulator(),options:{focusStateEnabled:!0}}])},_renderFocusTarget:a.noop,_init(){this.callBase(),this.$element().addClass("dx-map"),this._lastAsyncAction=Promise.resolve(),this._checkOption("provider"),this._checkOption("markers"),this._checkOption("routes"),this._initContainer(),this._grabEvents(),this._rendered={}},_useTemplates:()=>!1,_checkOption(e){const t=this.option(e);if("markers"===e&&!Array.isArray(t))throw g.Z.Error("E1022");if("routes"===e&&!Array.isArray(t))throw g.Z.Error("E1023")},_initContainer(){this._$container=(0,n.Z)("<div>").addClass("dx-map-container"),this.$element().append(this._$container)},_grabEvents(){const e=(0,m.addNamespace)(u.Z.down,this.NAME);_.Z.on(this.$element(),e,this._cancelEvent.bind(this))},_cancelEvent(e){this._provider&&this._provider.isEventsCanceled(e)&&!this.option("disabled")&&e.stopPropagation()},_saveRendered(e){const t=this.option(e);this._rendered[e]=t.slice()},_render(){this.callBase(),this._renderShield(),this._saveRendered("markers"),this._saveRendered("routes"),this._provider=new(F[this.option("provider")])(this,this._$container),this._queueAsyncAction("render",this._rendered.markers,this._rendered.routes)},_renderShield(){let e;this.option("disabled")?(e=(0,n.Z)("<div>").addClass("dx-map-shield"),this.$element().append(e)):(e=this.$element().find(".dx-map-shield"),e.remove())},_clean(){this._cleanFocusState(),this._provider&&this._provider.clean(),this._provider=null,this._lastAsyncAction=Promise.resolve(),this.setOptionSilent("bounds",{northEast:null,southWest:null}),delete this._suppressAsyncAction},_optionChanged(e){const{name:t}=e,o=this._optionChangeBag;switch(this._optionChangeBag=null,t){case"disabled":this._renderShield(),this.callBase(e);break;case"width":case"height":this.callBase(e),this._dimensionChanged();break;case"provider":this._suppressAsyncAction=!0,this._invalidate();break;case"apiKey":g.Z.log("W1001");break;case"bounds":this._queueAsyncAction("updateBounds");break;case"center":this._queueAsyncAction("updateCenter");break;case"zoom":this._queueAsyncAction("updateZoom");break;case"type":this._queueAsyncAction("updateMapType");break;case"controls":this._queueAsyncAction("updateControls",this._rendered.markers,this._rendered.routes);break;case"autoAdjust":this._queueAsyncAction("adjustViewport");break;case"markers":case"routes":{this._checkOption(t);const e=this._rendered[t];this._saveRendered(t),this._queueAsyncAction(`update${(0,c.titleize)(t)}`,o?o.removed:e,o?o.added:this._rendered[t]).then((e=>{o&&o.resolve(e)}));break}case"markerIconSrc":this._queueAsyncAction("updateMarkers",this._rendered.markers,this._rendered.markers);break;case"onReady":case"onUpdated":case"onMarkerAdded":case"onMarkerRemoved":case"onRouteAdded":case"onRouteRemoved":case"onClick":break;default:this.callBase.apply(this,arguments)}},_visibilityChanged(e){e&&this._dimensionChanged()},_dimensionChanged(){this._queueAsyncAction("updateDimensions")},_queueAsyncAction(e){const t=[].slice.call(arguments).slice(1),o=this._suppressAsyncAction;return this._lastAsyncAction=this._lastAsyncAction.then((()=>!this._provider||o?Promise.resolve():this._provider[e].apply(this._provider,t).then((e=>((e=(0,r.sE)(e))[0]&&!this._disposed&&this._triggerReadyAction(),e[1]))))),this._lastAsyncAction},_triggerReadyAction(){this._createActionByOption("onReady")({originalMap:this._provider.map()})},_triggerUpdateAction(){this._createActionByOption("onUpdated")()},setOptionSilent(e,t){this._setOptionWithoutOptionChange(e,t)},addMarker(e){return this._addFunction("markers",e)},removeMarker(e){return this._removeFunction("markers",e)},addRoute(e){return this._addFunction("routes",e)},removeRoute(e){return this._removeFunction("routes",e)},_addFunction(e,t){const o=this.option(e),s=(0,r.sE)(t);return o.push.apply(o,s),this._partialArrayOptionChange(e,o,s,[])},_removeFunction(e,t){const o=this.option(e),s=(0,r.sE)(t);return(0,p.each)(s,((t,i)=>{const n=(0,l.kE)(i)?i:null==o?void 0:o.indexOf(i);if(-1===n)throw g.Z.log("E1021",(0,c.titleize)(e.substring(0,e.length-1)),i);{const e=o.splice(n,1)[0];s.splice(t,1,e)}})),this._partialArrayOptionChange(e,o,[],s)},_partialArrayOptionChange(e,t,o,s){return(0,h.p4)(new Promise((i=>{this._optionChangeBag={resolve:i,added:o,removed:s},this.option(e,t)})).then((e=>e&&1===e.length?e[0]:e)),this)}});(0,s.default)("dxMap",V);const j=V}}]);