import{d as e,o as t,r,e as s,a as o,g as i,c as n,b as a,s as l,i as c,f as d,h as p,j as g,L as u}from"./baseChart-d9b79817.js";import{h as m}from"./tooltip-30e59f64.js";import"./dom-utils-c35907a1.js";import"./dom-da46d023.js";import"./browser-d96520d8.js";import"./common-f853e871.js";import"./_tslib-6e8ca86b.js";import"./css-classes-cee8476c.js";import"./disposable-d2c2d283.js";import"./dx-license-dd341102.js";import"./custom-theme-generator-9dcb87cb.js";class h extends d{constructor(e,t,r){super(e,t,r),this._pointClickArgs=null}getChartType(){return p.polarChartName}get widget(){return super.widget}createWidgetBuilder(e,t,r){const s=this._dxBlazorViz.dxPolarChart;return function(t){r(new s(e,t))}}createWidgetSettingsConverter(){return new g}configureSelectionController(e){void 0!==e.seriesSelectionMode&&this._selectionController.setSeriesSelectionMode(e.seriesSelectionMode),super.configureSelectionController(e)}getLegendItemType(){return u.point}getChartOnPointClickHandler(){return e=>{this._pointClickArgs=e}}getChartOnSeriesClickHandler(){return e=>{var t;const r=e.target,s=null===(t=this._pointClickArgs)||void 0===t?void 0:t.target;this.dotNetHelper.invokeMethodAsync("OnSeriesClickAsync",r.index,null==s?void 0:s.data,null==s?void 0:s.tag),this._pointClickArgs=null,this._selectionController.selectSeriesAndPoint(r,s)}}}const C={init:function(e,t,r){return e?c(e,t,r,((e,t,r)=>new h(e,t,r))):Promise.resolve()},dispose:e,onSeriesVisibleChanged:t,render:r,exportToFile:s,exportToBase64AndGetLengthAsync:o,getBase64ImageChunk:i,clearBase64ImageData:n,resetSelection:a,showTooltipForPoint:l,hideTooltip:m};export{C as default};
